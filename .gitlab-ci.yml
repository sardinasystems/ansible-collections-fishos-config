# -*- yaml -*-
# vim:set ts=2 sw=2 et:
---
image: $PYTHON_IMAGE

include:
  - component: $CI_SERVER_FQDN/sdn/cicd-components/ansible-lint@~latest
    inputs:
      stage: lint
  - component: $CI_SERVER_FQDN/sdn/cicd-components/j2lint@~latest
    inputs:
      stage: lint
  - component: $CI_SERVER_FQDN/sdn/cicd-components/yamllint@~latest
    inputs:
      stage: lint
  - component: $CI_SERVER_FQDN/sdn/cicd-components/semgrep@~latest
    inputs:
      stage: lint
      semgrep_rules: >-
        p/default
        p/python

stages:
  - lint

variables:
  CACHE_DIR: $CI_PROJECT_DIR/.cache
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"


.lint:
  stage: lint
  before_script:
    - chmod 755 $CI_PROJECT_DIR
    - poetry --version
    - poetry config cache-dir $CACHE_DIR
    - poetry config virtualenvs.in-project true
    - poetry install -vv
  after_script: []
  variables:
    LANG: C
  cache:
    paths:
      - .cache
      - .venv
  tags: [x86_64]


# ansible-lint:
#   extends: .lint
#   # allow_failure: true
#   script:
#     - >-
#       grep -Rl '^- hosts: \|^  hosts: ' --include \*.yml --include \*.yaml --exclude-dir collections --exclude-dir .venv --exclude-dir roles |
#       xargs poetry run ansible-lint --show-relpath --parseable --nocolor |
#       poetry run ansible-lint-junit -o ansible-lint.xml
#   artifacts:
#     when: always
#     reports:
#       junit: ansible-lint.xml


pytest:
  extends: .lint
  # allow_failure: true
  script:
    - poetry run pytest -v --junitxml=pytest-report.xml ./tests
  artifacts:
    when: always
    reports:
      junit: pytest-report.xml


mypy:
  extends: .lint
  after_script:
    - "[ -f 'coverage/index.txt' ] && cat coverage/index.txt"
  script:
    - poetry run mypy --ignore-missing-imports --follow-imports skip --txt-report coverage --cobertura-xml-report coverage -p plugins
  artifacts:
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura.xml
